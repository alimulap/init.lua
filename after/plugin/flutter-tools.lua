return
-- alternatively you can override the default configs
--require("flutter-tools").setup {
--  ui = {
--    -- the border type to use for all floating windows, the same options/formats
--    -- used for ":h nvim_open_win" e.g. "single" | "shadow" | {<table-of-eight-chars>}
--    border = "rounded",
--    -- This determines whether notifications are show with `vim.notify` or with the plugin's custom UI
--    -- please note that this option is eventually going to be deprecated and users will need to
--    -- depend on plugins like `nvim-notify` instead.
--    notification_style = 'native'
--  },
--  decorations = {
--    statusline = {
--      -- set to true to be able use the 'flutter_tools_decorations.app_version' in your statusline
--      -- this will show the current version of the flutter app from the pubspec.yaml file
--      app_version = false,
--      -- set to true to be able use the 'flutter_tools_decorations.device' in your statusline
--      -- this will show the currently running device if an application was started with a specific
--      -- device
--      device = false,
--      -- set to true to be able use the 'flutter_tools_decorations.project_config' in your statusline
--      -- this will show the currently selected project configuration
--      project_config = false,
--    }
--  },
--  debugger = { -- integrate with nvim dap + install dart code debugger
--    enabled = false,
--    run_via_dap = false, -- use dap instead of a plenary job to run flutter apps
--    -- if empty dap will not stop on any exceptions, otherwise it will stop on those specified
--    -- see |:help dap.set_exception_breakpoints()| for more info
--    exception_breakpoints = {},
--    --register_configurations = function(paths)
--    --  require("dap").configurations.dart = {
--    --    <put here config that you would find in .vscode/launch.json>
--    --  }
--    --end,
--  },
--  flutter_path = "C:/Users/user/Abyss/ProgramFiles/flutter/bin/", -- <-- this takes priority over the lookup
--  flutter_lookup_cmd = nil, -- example "dirname $(which flutter)" or "asdf where flutter"
--  fvm = false, -- takes priority over path, uses <workspace>/.fvm/flutter_sdk if enabled
--  widget_guides = {
--    enabled = false,
--  },
--  closing_tags = {
--    highlight = "ErrorMsg", -- highlight for the closing tag
--    prefix = ">", -- character to use for close tag e.g. > Widget
--    enabled = true -- set to false to disable
--  },
--  dev_log = {
--    enabled = true,
--    notify_errors = false, -- if there is an error whilst running then notify the user
--    open_cmd = "tabedit", -- command to use to open the log buffer
--  },
--  dev_tools = {
--    autostart = false, -- autostart devtools server if not detected
--    auto_open_browser = false, -- Automatically opens devtools in the browser
--  },
--  outline = {
--    open_cmd = "30vnew", -- command to use to open the outline buffer
--    auto_open = false -- if true this will open the outline automatically when it is first populated
--  },
--  lsp = {
--    color = { -- show the derived colours for dart variables
--      enabled = false, -- whether or not to highlight color variables at all, only supported on flutter >= 2.10
--      background = false, -- highlight the background
--      background_color = nil, -- required, when background is transparent (i.e. background_color = { r = 19, g = 17, b = 24},)
--      foreground = false, -- highlight the foreground
--      virtual_text = true, -- show the highlight using virtual text
--      virtual_text_str = "â– ", -- the virtual text character to highlight
--    },
--    on_attach = function(client, bufnr)
--        local opts = {buffer = bufnr, remap = false}
--        if client.server_capabilities.signatureHelpProvider then
--            require('lsp-overloads').setup(client, {
--                ui = {
--                    border = "single",           -- The border to use for the signature popup window. Accepts same border values as |nvim_open_win()|.
--                    height = nil,               -- Height of the signature popup window (nil allows dynamic sizing based on content of the help)
--                    width = nil,                -- Width of the signature popup window (nil allows dynamic sizing based on content of the help)
--                    wrap = true,                -- Wrap long lines
--                    wrap_at = nil,              -- Character to wrap at for computing height when wrap enabled
--                    max_width = nil,            -- Maximum signature popup width
--                    max_height = nil,           -- Maximum signature popup height
--                    -- Events that will close the signature popup window: use {"CursorMoved", "CursorMovedI", "InsertCharPre"} to hide the window when typing
--                    close_events = { "CursorMoved", "BufHidden", "InsertLeave" },
--                    focusable = true,           -- Make the popup float focusable
--                    focus = false,              -- If focusable is also true, and this is set to true, navigating through overloads will focus into the popup window (probably not what you want)
--                    offset_x = 0,               -- Horizontal offset of the floating window relative to the cursor position
--                    offset_y = 0,                -- Vertical offset of the floating window relative to the cursor position
--                    floating_window_above_cur_line = false, -- Attempt to float the popup above the cursor position 
--                    -- (note, if the height of the float would be greater than the space left above the cursor, it will default 
--                    -- to placing the float below the cursor. The max_height option allows for finer tuning of this)
--                },
--                keymaps = {
--                    next_signature = "<C-j>",
--                    previous_signature = "<C-k>",
--                    next_parameter = "<C-l>",
--                    previous_parameter = "<C-h>",
--                    close_signature = "<A-s>"
--                },
--                display_automatically = false
--            })
--        end
--        vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
--        vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
--        vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
--        vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
--        vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts)
--        vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts)
--        vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts)
--        vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)
--        vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)
--        vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
--    end,
--    -- see the link below for details on each option:
--    -- https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/tool/lsp_spec/README.md#client-workspace-configuration
--    settings = {
--      showTodos = true,
--      completeFunctionCalls = true,
--      --analysisExcludedFolders = {"<path-to-flutter-sdk-packages>"},
--      renameFilesWithClasses = "prompt", -- "always"
--      enableSnippets = true,
--      updateImportsOnRename = true, -- Whether to update imports and other directives when files are renamed. Required for `FlutterRename` command.
--    }
--  }
--}
